
enclave
{
    from "sgx_tstdc.edl" import *;
    from "sgx_pthread.edl" import *;

	include "sgx_quote.h"
    include "sys/socket.h"
    include "sys/select.h"
    include "netdb.h"
    include "poll.h"

    trusted
    {

         public sgx_status_t ecall_initPVRA(
            [in] sgx_target_info_t *target_info, uint64_t num_users,
            [in, size=userpubkeys_size] char *userpubkeys, size_t userpubkeys_size,
            [out] sgx_report_t *report,
            [out, size=sealedstate_size] uint8_t *sealedstate, size_t sealedstate_size,
            [out] uint8_t encpubkey[65],
            [out] uint8_t encpubkey_signature[64],
            [out] uint8_t userpubkeys_signature[65]);

        public sgx_status_t ecall_commandPVRA(
            [in, size=sealedstate_size] uint8_t *sealedstate, size_t sealedstate_size,
            [in, size=FT_size] uint8_t *FT, size_t FT_size,
            [in, size=FT_signature_size] uint8_t *FT_signature, size_t FT_signature_size,
            [in, size=eCMD_size] uint8_t *eCMD, size_t eCMD_size,
            [out, size=enc_cResponse_size] uint8_t *enc_cResponse, size_t enc_cResponse_size,
            [out] uint8_t cResponse_signature[64],
            [out, size=newsealedstate_size] uint8_t *newsealedstate, size_t newsealedstate_size);

        public sgx_status_t ecall_auditlogPVRA(
            [in, size=sealedstate_size] uint8_t *sealedstate, size_t sealedstate_size,
            [out, size=auditlog_size] uint8_t *auditlog, size_t auditlog_size,
            [out] uint8_t auditlog_signature[65],
            [out, size=newsealedstate_size] uint8_t *newsealedstate, size_t newsealedstate_size);


        public sgx_status_t ecall_init_buffer_sizes(uint64_t num_users, [out] size_t* esealed_state_size);

        public sgx_status_t ecall_cmd_buffer_sizes(
            [in, size=sealedstate_size] uint8_t *sealedstate, size_t sealedstate_size,
            [out] size_t *newsealedstate_size);

        public sgx_status_t ecall_audit_buffer_sizes(
            [in, size=sealedstate_size] uint8_t *sealedstate, size_t sealedstate_size,
            [out] size_t *newsealedstate_size,
            [out] size_t *newauditlog_buffer_size);
    };

    untrusted
    {
        void ocall_print_string([in, string] const char *str);
        void ocall_print_stderr([in, string] const char *str);
        void ocall_rdtsc(void);
        void ocall_gai_print_strerror(int errcode);
        int ocall_getaddrinfo(
            [in, string] const char *node, 
            [in, string] const char *service, 
            [in] const struct addrinfo *hints, 
            [out, size=max_size] uint8_t *addr_data,
            size_t max_size,
            [out] int * num_ret);
        int ocall_socket(int domain, int type, int protocol) propagate_errno;
        int ocall_connect (int fd, [in, size=len] const struct sockaddr *addr, socklen_t len) propagate_errno;
        int ocall_close(int fd) propagate_errno;
        ssize_t ocall_recv(int sockfd, [out, size=len] void *buf, size_t len, int flags) propagate_errno;
        ssize_t ocall_send(int sockfd, [in, size=len] const void *buf, size_t len, int flags) propagate_errno;
    };
};
