/*
 * Copyright (C) 2019 Intel Corporation
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */


enclave
{
	include "sgx_quote.h"

    trusted
    {

         public sgx_status_t ecall_initPVRA(
            [in] sgx_target_info_t *target_info, uint64_t num_users,
            [in, size=userpubkeys_size] char *userpubkeys, size_t userpubkeys_size,
            [out] sgx_report_t *report,
            [out, size=sealedstate_size] uint8_t *sealedstate, size_t sealedstate_size,
            [out] uint8_t encpubkey[65],
            [out] uint8_t encpubkey_signature[64],
            [out] uint8_t userpubkeys_signature[65]);

        public sgx_status_t ecall_commandPVRA(
            [in, size=sealedstate_size] uint8_t *sealedstate, size_t sealedstate_size,
            [in] uint8_t FT[8],
            [in] uint8_t FT_signature[64],
            [in, size=eCMD_size] uint8_t *eCMD, size_t eCMD_size,
            [out, size=enc_cResponse_size] uint8_t *enc_cResponse, size_t enc_cResponse_size,
            [out] uint8_t cResponse_signature[64],
            [out, size=newsealedstate_size] uint8_t *newsealedstate, size_t newsealedstate_size
            );

        public sgx_status_t ecall_auditlogPVRA(
            [in, size=sealedstate_size] uint8_t *sealedstate, size_t sealedstate_size,
            [out, size=auditlog_size] uint8_t *auditlog, size_t auditlog_size,
            [out] uint8_t auditlog_signature[65],
            [out, size=newsealedstate_size] uint8_t *newsealedstate, size_t newsealedstate_size
            );


        public sgx_status_t ecall_init_buffer_sizes(uint64_t num_users, [out] size_t* esealed_state_size);

        public sgx_status_t ecall_cmd_buffer_sizes(
            [in, size=sealedstate_size] uint8_t *sealedstate, size_t sealedstate_size,
            [out] size_t *newsealedstate_size);

        public sgx_status_t ecall_audit_buffer_sizes(
            [in, size=sealedstate_size] uint8_t *sealedstate, size_t sealedstate_size,
            [out] size_t *newsealedstate_size,
            [out] size_t *newauditlog_buffer_size);

        #undef BUFLEN
        #undef MBED_TLS_KEY_SIZE
        #undef MBEDTLS_MPI_MAX_SIZE
    };

    untrusted
    {
        void ocall_print_string([in, string] const char *str);
        void ocall_rdtsc(void);
        //void ocallbuf(int size);
        void ocall_allocate_seal(size_t seal_size);
        //void ocall_print_int([in, int] const int num);
    };
};
